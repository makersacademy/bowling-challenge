const Bowling = require("./bowling");
const Frame = require("./frame");

beforeEach(() => {
  bowling = new Bowling();
});

describe("Bowling", () => {
  it("initially returns a score of 0", () => {
    expect(bowling.totalScore()).toEqual(0);
  });

  it("adds a single frame with no spares or strikes", () => {
    let frame = new Frame();
    frame.roll(5);
    frame.roll(2);
    bowling.add(frame);
    expect(bowling.frames.length).toEqual(1);
  });

  it("adds three frames with no spares or strikes", () => {
    let frame1 = new Frame();
    frame1.roll(5);
    frame1.roll(2);
    bowling.add(frame1);
    let frame2 = new Frame();
    frame2.roll(4);
    frame2.roll(1);
    bowling.add(frame2);
    let frame3 = new Frame();
    frame3.roll(9);
    frame3.roll(0);
    bowling.add(frame3);
    expect(bowling.frames.length).toEqual(3);
  });

  it("scores a single frame with no pins knocked down", () => {
    let frame = new Frame();
    frame.roll(0);
    frame.roll(0);
    bowling.add(frame);
    bowling.checkSpare();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(0);
  });

  it("scores three frames with no strikes or spares", () => {
    let frame1 = new Frame();
    frame1.roll(5);
    frame1.roll(2);
    bowling.add(frame1);
    bowling.sum();
    let frame2 = new Frame();
    frame2.roll(4);
    frame2.roll(1);
    bowling.resetCurrentFrame();
    bowling.add(frame2);
    bowling.sum();
    let frame3 = new Frame();
    frame3.roll(9);
    frame3.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame3);
    bowling.sum();
    expect(bowling.totalScore()).toEqual(21);
  });

  it("doesnt fully score single spare until the next frame", () => {
    let frame1 = new Frame();
    frame1.roll(5);
    frame1.roll(5);
    bowling.add(frame1);
    bowling.checkSpare();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(10);
  });

  it("correctly scores a spare", () => {
    let frame1 = new Frame();
    frame1.roll(5);
    frame1.roll(5);
    bowling.add(frame1);
    bowling.checkSpare();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(10);
    let frame2 = new Frame();
    frame2.roll(4);
    frame2.roll(1);
    bowling.resetCurrentFrame();
    bowling.add(frame2);
    bowling.checkSpare();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(19);
  });

  it("can correctly score a spare in 3 frames", () => {
    let frame1 = new Frame();
    frame1.roll(2);
    frame1.roll(5);
    bowling.add(frame1);
    bowling.checkSpare();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(7);
    let frame2 = new Frame();
    frame2.roll(7);
    frame2.roll(3);
    bowling.resetCurrentFrame();
    bowling.add(frame2);
    bowling.checkSpare();
    bowling.sum();
    let frame3 = new Frame();
    frame3.roll(6);
    frame3.roll(3);
    bowling.resetCurrentFrame();
    bowling.add(frame3);
    bowling.checkSpare();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(32);
  });

  it("can correctly score 2 spares in a row", () => {
    let frame1 = new Frame();
    frame1.roll(5);
    frame1.roll(5);
    bowling.add(frame1);
    bowling.checkSpare();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(10);
    let frame2 = new Frame();
    frame2.roll(7);
    frame2.roll(3);
    bowling.resetCurrentFrame();
    bowling.add(frame2);
    bowling.checkSpare();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(27);
    let frame3 = new Frame();
    frame3.roll(6);
    frame3.roll(3);
    bowling.resetCurrentFrame();
    bowling.add(frame3);
    bowling.checkSpare();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(42);
  });

  it("scores a strike in one frame", () => {
    let frame1 = new Frame();
    frame1.roll(10);
    frame1.roll(0);
    bowling.add(frame1);
    bowling.checkSpare();
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(10);
  });

  it("correctly scores a single strike", () => {
    let frame1 = new Frame();
    frame1.roll(10);
    frame1.roll(0);
    bowling.add(frame1);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(10);
    let frame2 = new Frame();
    frame2.roll(4);
    frame2.roll(1);
    bowling.resetCurrentFrame();
    bowling.add(frame2);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(20);
  });

  it("correctly scores a full game", () => {
    let frame1 = new Frame();
    frame1.roll(8);
    frame1.roll(1);
    bowling.add(frame1);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(9);
    let frame2 = new Frame();
    frame2.roll(4);
    frame2.roll(1);
    bowling.resetCurrentFrame();
    bowling.add(frame2);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(14);
    let frame3 = new Frame();
    frame3.roll(4);
    frame3.roll(4);
    bowling.resetCurrentFrame();
    bowling.add(frame3);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(22);
    let frame4 = new Frame();
    frame4.roll(6);
    frame4.roll(4);
    bowling.resetCurrentFrame();
    bowling.add(frame4);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(32);
    let frame5 = new Frame();
    frame5.roll(6);
    frame5.roll(2);
    bowling.resetCurrentFrame();
    bowling.add(frame5);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(46);
    let frame6 = new Frame();
    frame6.roll(10);
    frame6.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame6);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(56);
    let frame7 = new Frame();
    frame7.roll(7);
    frame7.roll(2);
    bowling.resetCurrentFrame();
    bowling.add(frame7);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(74); //
    let frame8 = new Frame();
    frame8.roll(6);
    frame8.roll(1);
    bowling.resetCurrentFrame();
    bowling.add(frame8);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(81);
    let frame9 = new Frame();
    frame9.roll(9);
    frame9.roll(1);
    bowling.resetCurrentFrame();
    bowling.add(frame9);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(91);
    let frame10 = new Frame();
    frame10.roll(4);
    frame10.roll(5);
    bowling.resetCurrentFrame();
    bowling.add(frame10);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(104);
  });

  it("correctly scores 2 strikes in a row", () => {
    let frame1 = new Frame();
    frame1.roll(10);
    frame1.roll(0);
    bowling.add(frame1);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(10);
    let frame2 = new Frame();
    frame2.roll(10);
    frame2.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame2);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(30);
    let frame3 = new Frame();
    frame3.roll(5);
    frame3.roll(3);
    bowling.resetCurrentFrame();
    bowling.add(frame3);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(51);
  });

 


  it("can score a perfect game", () => {
    let frame1 = new Frame();
    frame1.roll(10);
    frame1.roll(0);
    bowling.add(frame1);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(10);
    let frame2 = new Frame();
    frame2.roll(10);
    frame2.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame2);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(30);
    let frame3 = new Frame();
    frame3.roll(10);
    frame3.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame3);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(60);
    let frame4 = new Frame();
    frame4.roll(10);
    frame4.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame4);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(90);
    let frame5 = new Frame();
    frame5.roll(10);
    frame5.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame5);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(120);
    let frame6 = new Frame();
    frame6.roll(10);
    frame6.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame6);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(150);
    let frame7 = new Frame();
    frame7.roll(10);
    frame7.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame7);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(180);
    let frame8 = new Frame();
    frame8.roll(10);
    frame8.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame8);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(210);
    let frame9 = new Frame();
    frame9.roll(10);
    frame9.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame9);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(240);
    let frame10 = new Frame();
    frame10.roll(10);
    frame10.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame10);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(270);
    let frame11 = new Frame();
    frame11.roll(10);
    frame11.roll(0);
    bowling.resetCurrentFrame();
    bowling.add(frame11);
    bowling.checkSpare();
    bowling.checkStrike();
    bowling.sum();
    expect(bowling.totalScore()).toEqual(300);
  });
});

